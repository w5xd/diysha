#!/usr/local/bin/perl
#Copyright (c) 2013 by Wayne Wright, Round Rock, Texas.
#See license at http://github.com/w5xd/diysha/blob/master/LICENSE.md 
use lib "../..";
require define_local;
use MIME::Base64;
use IPC::Open2;

my $DEBUG = 0;    #makes only text when nonzero

define_local::SetEnvironmentVariables("../../HouseConfiguration.ini");

#We're a CGI script.
#We take arguments. Either as HTTP POST or GET. Find them...
local ( $buffer, @pairs, $pair, $name, $value, %FORM );

# Read in text
$ENV{'REQUEST_METHOD'} =~ tr/a-z/A-Z/;
if ( $ENV{'REQUEST_METHOD'} eq "POST" ) {
    read( STDIN, $buffer, $ENV{'CONTENT_LENGTH'} );
}
else {
    $buffer = $ENV{'QUERY_STRING'};
}

# Split information into name/value pairs
@pairs = split( /&/, $buffer );
foreach $pair (@pairs) {
    ( $name, $value ) = split( /=/, $pair );
    $value =~ tr/+/ /;
    $value =~ s/%(..)/pack("C", hex($1))/eg;
    $FORM{$name} = $value;
}

# required http header cuz we're CGI
print STDOUT <<Begin_of_output_STDOUT;
Content-type: text/html

<!doctype html>
<html>
<head>
<title>Heating and Cooling History</title>
</head>
<body>
Begin_of_output_STDOUT

if ($DEBUG) {
    print "FORM: \n";
    print %FORM;
    print "\n";
    if ( defined( $FORM{s1} ) ) { print "s1 defined <br/>\n"; }
    if ( defined( $FORM{s2} ) ) { print "s2 defined <br/>\n"; }
    if ( defined( $FORM{s3} ) ) { print "s3 defined <br/>\n"; }
}

my $GRAPH_HTML     = 0;
my $graph_time     = time;
my $graph_interval = 24 * 60 * 60;
my $day_checked    = "";
my $mon_checked    = "";
my $week_checked   = "";
my $START_TIME     = "";
my $STOP_TIME      = "";

#sort through the form input
if ( defined( $FORM{timep} ) ) {
    $intName = $FORM{timep};
    if ( $intName eq "month" ) {
        $graph_interval *= 31;
        $mon_checked = "checked";
    }
    elsif ( $intName eq "week" ) {
        $week_checked = "checked";
        $graph_interval *= 7;
    }
    elsif ( $intName eq "day" ) { $day_checked = "checked"; }
}
else { $day_checked = "checked"; }

if ( defined( $FORM{all} ) ) {
    $GRAPH_HTML = 1;
    $graph_time = 0;
}
elsif ( defined( $FORM{today} ) ) {
}
elsif ( defined( $FORM{next} ) ) {
    $graph_time = $FORM{time_stamp} + $graph_interval;
}
elsif ( defined( $FORM{prev} ) ) {
    $graph_time = $FORM{time_stamp} - $graph_interval;
}
elsif ( defined( $FORM{refresh} ) ) {
    $graph_time = $FORM{time_stamp};
}

if ( $graph_time != 0 ) {
    ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime($graph_time);
    $year += 1900;
    $mon  += 1;
    $GRAPH_HTML = 1;
    $START_TIME = "$year/$mon/$mday 00:00:00";
    ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime( $graph_time + $graph_interval );
    $year += 1900;
    $mon  += 1;
    $STOP_TIME = "$year/$mon/$mday 00:00:00";
}
    print STDOUT <<form_done;
<table width='100%'>
<tr>
<td align='left'>
<form action="" method="POST" >
<input type="submit" value="All data" name="all" >
<input type="submit" value="Today" name="today" >
form_done

    if ( $graph_time != 0 ) {
        print STDOUT <<form_done2;
<input type="submit" value="Refresh" name="refresh" >
<input type="submit" value="<" name="prev" >
<input type="submit" value=">" name="next" ><br/>
<input type="radio" name="timep" value="day" $day_checked> Day
<input type="radio" name="timep" value="week" $week_checked > Week
<input type="radio" name="timep" value="month"$mon_checked > Month
<input type="hidden" value="$graph_time" name="time_stamp" >
form_done2
    }

    print STDOUT <<table_done_at_end;
</form>
</td>
<td align='center'> <h3>Heating and Cooling History</h3>
</td>
</tr>
</table>
table_done_at_end

if ($GRAPH_HTML) {
    if ($DEBUG) {
        print "buffer: " . $buffer . " FORM: \n";
        print %FORM;
        print "\n";
    }

    # environment says where files are...
    my $PROJECT_DIR = $ENV{"DOCUMENT_ROOT"} . "/../..";
    my $gnupError = $ENV{"DOCUMENT_ROOT"} . "/../logs/gnupError.log";
    chdir $PROJECT_DIR;    #The data files for gnuplot are located close by...
    if ($DEBUG) { print "Project: " . $PROJECT_DIR . "\n"; }
    my $GNU_OUTPUTF;
    my $GNUPLOT;
    my $pid;
    # just print text in debug mode, but make code look same
    if   ($DEBUG) {$pid = open2( $GNU_OUTPUTF, $GNUPLOT, "cat" ); }
    else          {
        system("bash", "-c", "date >> $gnupError");
	$pid = open2( $GNU_OUTPUTF, $GNUPLOT, "gnuplot 2>>$gnupError" ); 
	}

    binmode($GNU_OUTPUTF); # not sure if this is needed

    #first stuff to gnuplot
    #"almost" literal substitution here. Careful with $ character--escape it
    print $GNUPLOT <<gnuplot_Commands1_done;
set xdata time
#timefmt matches what the logging tools produce in their first column
set timefmt "%Y/%m/%d %H:%M:%S"
set key outside
set ylabel "Temperature(F)"
set y2tics ("gas" 2, "hp" 3, "cool" 4) nomirror
set y2range [-5:5]
gnuplot_Commands1_done

    #start/stop time commands to gnuplot...
    if ( ( $START_TIME ne "" ) && ( $STOP_TIME ne "" ) ) {
        print $GNUPLOT "set xrange [\"$START_TIME\":\"$STOP_TIME\"]\n";
    }

    #more stuff to gnuplot
    print $GNUPLOT <<gnuplot_Commands2_done;
set ytics nomirror
set xtics rotate
set xtics format "%b-%d %H:%M"
set terminal png size 1200, 600
set output
set grid xtics ytics
show grid
# plot command last in this script
plot \\
   "$ENV{'THERMOSTAT_LOG_LOCATION'}/thermostat_log.txt" using 1:4 with linespoints title columnheader, \\
   "$ENV{'THERMOSTAT_LOG_LOCATION'}/thermostat_log.txt" using 1:5 with lines title columnheader, \\
   "$ENV{'FURNACE_LOG_LOCATION'}/pcsensor.log" using 1:4 with lines title "deskside", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/modtronix.log" using 1:4 with lines title "inlet", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/modtronix.log" using 1:5 with lines title "outlet", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/pcsensor.log" using 1:5 with lines title "outside", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/modtronix" using 1:3 with lines title "out(hp)", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/weather_gov.log" using 1:(\$4 < 3720 ? \$3 : 1/0) with lines title "airport", \\
   "$ENV{'THERMOSTAT_LOG_LOCATION'}/thermostat_log.txt" using 1:(\$7 > 1 ? \$7 : 1/0) axis x1y2 with linespoints title "hvac", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/poll_events.log" using 2:(\$5 > 1 ? \$5 : 1/0) axis x1y2 with linespoints title "opto", \\
   "$ENV{'FURNACE_LOG_LOCATION'}/relay_events.log" using 2:(\$5 > 1 ? \$5 : 1/0) axis x1y2 with linespoints title "relay"
   exit
   
gnuplot_Commands2_done
    close($GNUPLOT);

    #gnuplot runs, puts its results to stdout and we read them here.

    if ($DEBUG) {
        print STDOUT "<pre>\n";
        while ( read( $GNU_OUTPUTF, $buf, 60 * 57 ) ) { print $buf; }
        print "\n</pre>\n";
    }
    else {
        print STDOUT
		"<img alt=\"No Data. Try a different time\"".
		" height='100%' width='100%'" .
		" src=\"data:image/png;base64,";
        while ( read( $GNU_OUTPUTF, $buf, 60 * 57 ) ) {
            print encode_base64($buf);
        }
        print STDOUT "\"/>\n";
    }

print STDOUT <<form_done_at_end;
</body>
</html>
form_done_at_end
     waitpid ($pid, 0);
}


