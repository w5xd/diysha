#!/usr/local/bin/perl -w -I..

# perl program that defines the main entry point to the
# sensor monitoring server
# The first parameter must be the path to the HouseConfiguration.ini

use strict;
use Carp qw( croak );

use AppConfig;

# packages we'll use to call their polling method
require hvac::PollWeatherGov;
require hvac::PollPcsensor;
require hvac::PollModtronix;
require hvac::PollWirelessGateway;

my $HouseConfFileName = shift;

croak "HouseConfig.ini required" if ( !defined $HouseConfFileName );

my $config = AppConfig->new(
    {
        CREATE => 1,
        CASE   => 1,
        GLOBAL => {
            ARGCOUNT => AppConfig::ARGCOUNT_ONE,
        },
    }
);
$config->file($HouseConfFileName);
my %vars      = $config->varlist( "^SENSORMONITOR_STARTUP_", 1 );
my %eventvars = $config->varlist( "^SENSOREVENTS_",          1 );
my %bashVars  = $config->varlist( "^BASH_",                  1 );

#parallel arrays of ...
my @tasks;         # what to do
my @waitTime;      # how long to wait between
my @waitedTime;    # how long have waited

my @eventprocs;    # who wants to see the results

my $key;
my $value;
while ( ( $key, $value ) = each(%vars) ) {
    my @v = split( ' ', $value );
    if ( $key eq "WEATHERGOV" ) {
        croak "two arguments required for WEATEHRGOV" if scalar @v < 2;
        push( @waitTime,   shift @v );
        push( @waitedTime, 0 );          #arrange to poll once on startup
        unshift( @v, \%bashVars );
        push( @tasks, hvac::PollWeatherGov->new(@v) );
    }
    elsif ( $key eq "PCSENSOR" ) {
        croak "timeout required for PCSENSOR" if scalar @v < 1;
        push( @waitTime,   shift @v );
        push( @waitedTime, 0 );
        unshift( @v, \%bashVars );
        push( @tasks, hvac::PollPcsensor->new(@v) );
    }
    elsif ( $key eq "MODTRONIX" ) {
        croak "timeout required for MODTRONIX" if scalar @v < 1;
        push( @waitTime,   shift @v );
        push( @waitedTime, 0 );
        unshift( @v, \%bashVars );
        push( @tasks, hvac::PollModtronix->new(@v) );
    }
    elsif ( $key eq "WIRELESSGATEWAY" ) {
        croak "At least two arguments required for WIRELESSGATEWAY" if scalar @v < 2;
        push( @waitTime,   shift @v );
        push( @waitedTime, 0 );          #arrange to poll once on startup
        unshift( @v, \%bashVars );
        push( @tasks, hvac::PollWirelessGateway->new(@v) );
    }
}

while ( ( $key, $value ) = each(%eventvars) ) {
    if ( $key eq "CHECK_OUTSIDE" ) {
        eval "require $value";
        if ($@) {
            die("Cannot load $value : $@");
        }
        push( @eventprocs, $value->new( \%bashVars ) );
    }
}

%vars      = ();
%eventvars = ();

#loop forever doing the tasks at their poll intervals

while (1) {
    my $i = 0;
    foreach my $task (@tasks) {
        if ( --$waitedTime[$i] <= 0 ) {
            $task->poll();

            #pass this polled event on to eventprocs
            if ( $task->can("notifyTemperature") ) {
                foreach my $eproc (@eventprocs) {
                    if ( $eproc->can("temperatureEvent") ) {
                        $task->notifyTemperature($eproc);
                    }
                }
            }
            $waitedTime[$i] = $waitTime[$i];
        }
        $i += 1;
    }
    sleep 1;
}
